/*Bryan Techera #271868  Martín Lores #285463
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interfaz;

import Dominio.Sistema;
import Dominio.Deposito;
import java.awt.BorderLayout;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Observable;
import java.util.Observer;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.general.DefaultPieDataset;

public class GraficoDepositos extends javax.swing.JFrame implements Observer {

    private Sistema sistema;
    private HashMap<Integer, Deposito> depositos;

    public GraficoDepositos(Sistema sistema) {
        this.sistema = sistema;
        initComponents();
        update(null, "contratos");
        update(null, "deposito");
        graficar();
    }

    @Override
    public void update(Observable o, Object arg) {

        String opcion = (String) arg;
        if (opcion.equals("contratos") || opcion.equals("deposito")) {
            this.depositos = sistema.getDepositos();
            graficar();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Estadistica de ocupación");
        setResizable(false);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 618, Short.MAX_VALUE)
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 429, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(634, 437));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated

    }//GEN-LAST:event_formWindowActivated

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus

    }//GEN-LAST:event_formWindowGainedFocus



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel panel1;
    // End of variables declaration//GEN-END:variables

    private void graficar() {
        this.depositos = sistema.getDepositos();

        int refyEst = 0;            //contadores para cargar los datos al grafico
        int noRefEst = 0;
        int refNoEst = 0;
        int noRefNoEst = 0;

        Collection<Deposito> coleccionDeDepositos = this.depositos.values();
        Iterator it = coleccionDeDepositos.iterator();

        while (it.hasNext()) {
            Deposito deposito = (Deposito) it.next();

            if (deposito.isAlquilado()) {
                if (deposito.esEstante() && deposito.esRefrigerado()) {
                    refyEst++;

                } else if (deposito.esEstante() && !deposito.esRefrigerado()) {
                    noRefEst++;
                } else if (!deposito.esEstante() && deposito.esRefrigerado()) {
                    refNoEst++;
                } else if (!deposito.esEstante() && !deposito.esRefrigerado()) {
                    noRefNoEst++;
                }

            }
        }
        int total = refyEst + noRefEst + refNoEst + noRefNoEst;
        DefaultPieDataset datos = new DefaultPieDataset();
        datos.setValue("Refrigerados con estante: " + refyEst, refyEst);
        datos.setValue("Refrigerados sin estantes:" + refNoEst, refNoEst);
        datos.setValue("No refrigerados con estantes: " + noRefEst, noRefEst);
        datos.setValue("No refrigerados sin estantes: " + noRefNoEst, noRefNoEst);

        JFreeChart grafico = ChartFactory.createPieChart(
                "Depositos alquilados: " + total, //nombre del grafico
                datos, //set de datos
                true, //visibilidad categorias
                true, //herramientas
                false //generacion de URL
        );

        ChartPanel panel = new ChartPanel(grafico);

        panel1.setLayout(new BorderLayout());
        panel1.removeAll();
        panel1.add(panel, BorderLayout.NORTH);

        pack();
        repaint();
    }

}
